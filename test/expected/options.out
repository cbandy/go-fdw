-- vim: set expandtab shiftwidth=2 syntax=pgsql tabstop=2 :
--
DO $$ BEGIN RAISE INFO 'no server options'; END $$;
INFO:  no server options
--
CREATE SERVER none FOREIGN DATA WRAPPER go_test_fdw;
CREATE FOREIGN TABLE server_options (option text, value text)
SERVER none;
-- expect empty set
SELECT * FROM server_options ORDER BY option;
 option | value 
--------+-------
(0 rows)

--
DO $$ BEGIN RAISE INFO 'some server options'; END $$;
INFO:  some server options
--
DROP FOREIGN TABLE server_options;
CREATE SERVER few FOREIGN DATA WRAPPER go_test_fdw
OPTIONS (uno 'dos', tres 'quatro');
CREATE FOREIGN TABLE server_options (option text, value text)
SERVER few;
-- expect non-empty set
SELECT * FROM server_options ORDER BY option;
 option | value  
--------+--------
 tres   | quatro
 uno    | dos
(2 rows)

--
DO $$ BEGIN RAISE INFO 'no table options'; END $$;
INFO:  no table options
--
CREATE FOREIGN TABLE table_options (option text, value text)
SERVER few;
-- expect empty set
SELECT * FROM table_options ORDER BY option;
 option | value 
--------+-------
(0 rows)

--
DO $$ BEGIN RAISE INFO 'some table options'; END $$;
INFO:  some table options
--
DROP FOREIGN TABLE table_options;
CREATE FOREIGN TABLE table_options (option text, value text)
SERVER few
OPTIONS (ichi 'ni', san 'shi');
-- expect non-empty set
SELECT * FROM table_options ORDER BY option;
 option | value 
--------+-------
 ichi   | ni
 san    | shi
(2 rows)

--
DO $$ BEGIN RAISE INFO 'no user mapping'; END $$;
INFO:  no user mapping
--
CREATE FOREIGN TABLE user_options (option text, value text)
SERVER few;
-- expect error
SELECT * FROM user_options ORDER BY option;
ERROR:  user mapping not found for "postgres"
--
DO $$ BEGIN RAISE INFO 'empty user mapping'; END $$;
INFO:  empty user mapping
--
CREATE USER MAPPING FOR PUBLIC
SERVER few;
-- expect empty set
SELECT * FROM user_options ORDER BY option;
 option | value 
--------+-------
(0 rows)

--
DO $$ BEGIN RAISE INFO 'some user mapping'; END $$;
INFO:  some user mapping
--
CREATE USER MAPPING FOR postgres
SERVER few
OPTIONS (eins 'zwei', drei 'vier');
-- expect non-empty set
SELECT * FROM user_options ORDER BY option;
 option | value 
--------+-------
 drei   | vier
 eins   | zwei
(2 rows)

--
-- cleanup
--
DROP SERVER few, none CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to foreign table server_options
drop cascades to foreign table table_options
drop cascades to foreign table user_options
drop cascades to user mapping for public on server few
drop cascades to user mapping for postgres on server few
